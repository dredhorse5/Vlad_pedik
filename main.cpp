

#include    <glut.h>
#include    <stdio.h>
#include    <math.h>
#include    <iostream>
#include    <ctime>
//#include    <SOIL.h> // библиотека для тектур. пока не нужна


int width = 800; // высота окна
int height = 400; // ширина окна
float angle = 0; // угол поворота

void Reshape(int w, int h) { // хз, как все это работает, но вам и не надо)
    float ratio = w * 1.0 / h;
    glMatrixMode(GL_PROJECTION);
    glLoadIdentity();
    glViewport(0, 0, w, h);
    gluPerspective(60, ratio, 0.1f, 360.0f);  //задаем перспективную проекцию. погуглите, что это
    //(60 -угол обзора) (ratio- соотношщение сторон) (0.1f- минимальное видимое расстояние в float) ( 360.0f- максимальная дальность видимости)
    glMatrixMode(GL_MODELVIEW);
}

void keyboard(unsigned char key, int x, int y) {
    if (key == 27){ // если key = 27( 27 это кнопка escape по таблице символов на клаве), то выходим из программы
        exit(0); 
    }
}

void cube() {
    glColor3f(0.5, 1.0, 1.0); // задаем цвет грани
    ///задняя
    glBegin(GL_QUADS); // говорим, что начинаем рисовать куб
    glVertex3f(1, -1, 1); // его координаты
    glVertex3f(-1, -1, 1);// его координаты
    glVertex3f(-1, 1, 1);// его координаты
    glVertex3f(1, 1, 1);// его координаты
    glEnd(); // говорим, что заканчиваем рисовать


    //передняя
    glColor3f(1.0, 0.5, 1.0);// задаем цвет грани
    glBegin(GL_QUADS);// говорим, что начинаем рисовать куб
    glVertex3f(-1, -1, -1);// его координаты
    glVertex3f(1, -1, -1);// его координаты
    glVertex3f(1, 1, -1);// его координаты
    glVertex3f(-1, 1, -1);// его координаты
    glEnd(); // говорим, что заканчиваем рисовать


    //ПРАВАЯ
    glColor3f(1.0, 1.0, 0.5);
    glBegin(GL_QUADS);
    glVertex3f(1, -1, -1);
    glVertex3f(1, -1, 1);
    glVertex3f(1, 1, 1);
    glVertex3f(1, 1, -1);
    glEnd();


    //ЛЕВАЯ
    glColor3f(0.5, 0.5, 1.0);
    glBegin(GL_QUADS);
    glVertex3f(-1, -1, 1);
    glVertex3f(-1, -1, -1);
    glVertex3f(-1, 1, -1);
    glVertex3f(-1, 1, 1);
    glEnd();


    //НИЖНЯЯ
    glColor3f(1.0, 0.5, 0.5);
    glBegin(GL_QUADS);
    glVertex3f(-1, -1, 1);
    glVertex3f(1, -1, 1);
    glVertex3f(1, -1, -1);
    glVertex3f(-1, -1, -1);
    glEnd();


    //ВЕРХНЯЯ
    glColor3f(0.5, 0.5, 0.5);
    glBegin(GL_QUADS);
    glVertex3f(-1, 1, -1);
    glVertex3f(1, 1, -1);
    glVertex3f(1, 1, 1);
    glVertex3f(-1, 1, 1);
    glEnd();
}
void Draw() {

    glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT); // чистим цвет и глубину
    glClearColor(1.0, 0, 0, 0); // задаем цвет фона в режиме GRBA
    glPushMatrix(); // сохраняем систему координат. хз зачем, но без этолго не работает)

    angle += 0.05; // каждый раз добавлячем угол
    if (angle > 360) angle = 0; // если угол больше 360, то пусть он будет 0

    glTranslatef(0, 0, -5); // двигаем систему координат на -5 по z, чтобы куб не рисовался в нас
    glRotatef(angle, 0.4, 1, 0); // поворачиваем систему координат на заданный угол. другие переменные задают коофицент поворота по каждой из осей
    //=================================начало основного цикла===================================================================================
    
    
    
    cube(); // функция, котоаря рисует код

    

    //=================================конец основного цикла===================================================================================
    glPopMatrix(); // загружаем систему кординат. опять же, хз зачем, но надо)
    glutPostRedisplay(); // Обновляем картинку в окне
    glFinish(); // заканчиваем рисование
}



int main(){
    //===========================INITIALIZATION===========================================
    glutInitWindowSize(width, height); // инициализируем окно с заданной высотой и шириной
    glutInitDisplayMode(GLUT_RGB); // говорим, что режим цвета в окне будет GRB
    glutCreateWindow("cubes"); // созадем окно с названием cubes
    glEnable(GL_DEPTH_TEST); // вкллючаем режим глубины. это нужно для того, чтобы объекты правильно отображались друг за другом
    glutDisplayFunc(Draw);    // пишем название функции, в которой будем рисовать
    glutReshapeFunc(Reshape); //  пишем название функции, которая будет обрабатывать изменение размера окна
    glutKeyboardFunc(keyboard); // пишем название функции, где мы будем смотреть, какие клавиши нажаты на клаве
    
    glutMainLoop(); // говорим, что запускаем непрерывный цикл рисования. с этого момента циклично будет проигрываться функция draw
}//*/
